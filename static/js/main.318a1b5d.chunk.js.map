{"version":3,"sources":["Form.js","List.js","Links.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","useState","name","setName","description","setDescription","type","value","onChange","e","target","onClick","createTodo","List","editedTask","setEditedTask","editTaskName","editTaskDescription","saveTask","list","map","el","className","key","_id","disabled","trim","done","onDoubleClick","onToggleDone","console","log","remove","Links","id","href","App","setList","getTodoAll","axios","url","method","header","then","res","data","catch","useEffect","form","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.318a1b5d.chunk.js","sourcesContent":["\n\nimport React, {useState} from 'react';\n\nfunction Form(props) {\n\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n\n  const onSubmit = () => {\n    props.createTodo({name, description});\n    setName('');\n    setDescription('');\n  };\n\n  return (\n    <div>\n      <input type=\"text\" value={name}\n             onChange={e => setName(e.target.value)} />\n      <input type=\"name\" value={description}\n             onChange={e => setDescription(e.target.value)} />\n\n      <button onClick={onSubmit}>Create</button>\n\n    </div>\n  );\n}\n\nexport default Form;\n","import React, {useState} from 'react';\n\nfunction List(props) {\n\n  const [editedTask, setEditedTask] = useState({});\n\n  const editTaskName = (e) => {\n    setEditedTask({...editedTask, name: e.target.value})\n  }\n  const editTaskDescription = (e) => {\n    setEditedTask({...editedTask, description: e.target.value})\n  }\n  const saveTask = () => {\n    props.saveTask(editedTask);\n    setEditedTask({});\n  }\n\n  return (\n    <div>\n\n      {props.list.map(el => (\n        <div className=\"listItem\" key={el._id}>\n\n          {editedTask._id === el._id ? (\n              <>\n                <input type=\"text\"\n                       value={editedTask.name}\n                       onChange={editTaskName}/>\n                <input type=\"text\"\n                       value={editedTask.description}\n                       onChange={editTaskDescription}/>\n                <button onClick={saveTask} disabled={!editedTask.name.trim() || !editedTask.description.trim()}>\n                  Save</button>\n              </>\n            )\n            :\n            (\n            <>\n              <span className=\"doneSign\">{el.done===true ? \"✅\" : \"❌\"}</span>\n              <strong onDoubleClick={() => setEditedTask(el)}>{el.name}</strong>\n                {' - '}\n              <span onDoubleClick={() => setEditedTask(el)}>{el.description}</span><span>{'    '}</span>\n              <button onClick={() => {props.onToggleDone(el._id, {\"done\": !el.done});\n              console.log(editedTask._id)}}>\n              {el.done ? \"Undone\" : \"Done\"} </button>\n\n              <button onClick={() => props.remove(el._id)}>Remove</button>\n            </>\n            )\n          }\n        </div>\n        ))\n      }\n\n    </div>\n  );\n}\n\nexport default List;\n","\nimport React from 'react';\n\nfunction Links() {\n\n  return (\n    <div>\n      <p id=\"date\">Created: July 3, 2020</p>\n      <p id=\"date\">Updated: August 22, 2020</p>\n      <br/>\n\n      <h4>Project: ToDo list, connected to my Mongo Atlas DB, w/ backend deployed on Heroku</h4>\n\n      <p>Links:</p>\n\n      <p id=\"link\"><span>{'Client Github website: '}</span>\n        <a href=\"http://BackToTheStars.github.io/todo-client-react\">\n          http://BackToTheStars.github.io/todo-client-react\n        </a>\n      </p>\n\n      <p id=\"link\"><span>{'Client Github repository: '}</span>\n        <a href=\"https://github.com/BackToTheStars/todo-client-react/tree/master/src\">\n          https://github.com/BackToTheStars/todo-client-react/tree/master/src\n        </a>\n      </p>\n\n      <p id=\"link\"><span>{'Backend Heroku website: '}</span>\n        <a href=\"https://to-do-server-heroku-092.herokuapp.com\">\n          https://to-do-server-heroku-092.herokuapp.com\n        </a>\n      </p>\n\n      <p id=\"link\"><span>{'Backend Github repository: '}</span>\n        <a href=\"https://github.com/BackToTheStars/todo-server-myown-remote-mongodb-checked\">\n          https://github.com/BackToTheStars/todo-server-myown-remote-mongodb-checked\n        </a>\n      </p>\n      <br />\n    </div>\n  );\n}\n\nexport default Links;\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Form from './Form'\nimport List from './List'\nimport Links from './Links'\nimport axios from 'axios';\n// import api from './api/config' - пока не помогает\n\nfunction App() {\n\n  const [list, setList] = useState([]);\n\n  const getTodoAll = () => {\n    // api.get('todo')\n    axios({\n      url: \"https://to-do-server-heroku-092.herokuapp.com/todo\",\n      method: 'GET',\n      header: {'Access-Control-Allow-Origin': '*'}\n    })\n      .then(res => {\n        console.log(res);\n        setList(res.data)\n      })\n      .catch(e => console.log(e));\n    };\n\n  useEffect(() => {\n    getTodoAll();\n  }, []);\n\n  const createTodo = (form) => {\n    axios({\n      url: 'https://to-do-server-heroku-092.herokuapp.com/todo/',\n      method: 'POST',\n      data: form\n    })\n      .then(res => {\n        getTodoAll();\n      })\n      .catch(e => console.log(e));\n  };\n\n  const onToggleDone = (id, form) => {\n    axios({\n      url: `https://to-do-server-heroku-092.herokuapp.com/todo/${id}`,\n      method: 'PUT',\n      data: form\n    })\n      .then(res => {\n        getTodoAll();\n      })\n      .catch(e => console.log(e));\n  };\n\n  const saveTask = (form) => {\n    axios({\n      url: `https://to-do-server-heroku-092.herokuapp.com/todo/${form._id}`,\n      method: 'PATCH',\n      data: form\n    })\n      .then(res => {\n        getTodoAll();\n      })\n      .catch(e => console.log(e));\n  };\n\n  const remove = (id) => {\n    axios({\n      url: `https://to-do-server-heroku-092.herokuapp.com/todo/${id}`,\n      method: 'DELETE'\n    })\n      .then(res => {\n        getTodoAll();\n      })\n      .catch(e => console.log(e));\n  };\n\n  return (\n    <div>\n      <Links />\n      <Form createTodo={createTodo}/>\n      <List list={list} remove={remove} onToggleDone={onToggleDone} saveTask={saveTask}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}